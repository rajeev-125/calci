{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","value","setValue","clickHandler","e","target","clickHandler2","getResult","eval","className","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4yBAGA,SAASA,MAET,cAAyBC,oDAAS,IAAlC,+JAAOC,MAAP,cAAaC,SAAb,cAEMC,aAAe,SAACC,GACpBF,SAASD,MAAQG,EAAEC,OAAOJ,QAGtBK,cAAgB,WACpBJ,SAAS,KAGLK,UAAY,SAAZA,YAEJL,SAASM,KAAKP,SAId,OACE,mEAAKQ,UAAU,MAAf,UACE,gEAAGA,UAAU,MAAb,wBAEA,oEAAOC,GAAG,QAAQT,MAAOA,QAEzB,6EACE,qEAAQQ,UAAU,KAAKE,QAASL,cAAeL,MAAM,GAArD,gBAGA,qEAAQQ,UAAU,SAAQE,QAASR,aAAcF,MAAM,IAAvD,eAGA,qEAASQ,UAAU,SAAQE,QAASR,aAAcF,MAAM,IAAxD,eAIA,oEACR,mEAAKS,GAAG,QAAR,UACQ,qEAASD,UAAU,OAAME,QAASR,aAAcF,MAAM,IAAtD,eAGA,qEAAQQ,UAAU,OAAME,QAASR,aAAcF,MAAM,IAArD,eAGA,qEAAQQ,UAAU,OAAME,QAASR,aAAcF,MAAM,IAArD,eAGA,qEAAQQ,UAAU,SAAQE,QAASR,aAAcF,MAAM,IAAvD,kBAKA,mEAAKS,GAAG,SAAR,UACA,qEAAQD,UAAU,OAAME,QAASR,aAAcF,MAAM,IAArD,eAGA,qEAASQ,UAAU,OAAME,QAASR,aAAcF,MAAM,IAAtD,eAGA,qEAAQQ,UAAU,OAAOE,QAASR,aAAcF,MAAM,IAAtD,eAGA,qEAAQQ,UAAU,SAASE,QAASR,aAAcF,MAAM,IAAxD,eAGA,uEAGA,qEAAQQ,UAAU,OAAOE,QAASR,aAAcF,MAAM,IAAtD,eAGA,qEAAQQ,UAAU,OAAOE,QAASR,aAAcF,MAAM,IAAtD,eAGA,qEAAQQ,UAAU,OAAME,QAASR,aAAcF,MAAM,IAArD,eAGA,qEAASQ,UAAU,SAAQE,QAASR,aAAcF,MAAM,IAAxD,eAGA,oEACA,qEAAQQ,UAAU,OAAME,QAASR,aAAcF,MAAM,IAArD,eAGA,qEAAQQ,UAAU,OAAME,QAASR,aAAcF,MAAM,IAArD,eAGA,qEAAQQ,UAAU,QAAQE,QAASJ,UAAnC,eAEA,0EAMOR,2B,iICrFAa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxB,EAAA,EAAD,MAEFyB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f9c4de60.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n\nconst [value,setValue] = useState('');\n\nconst clickHandler = (e) => {\n  setValue(value + e.target.value);\n};\n\nconst clickHandler2 = () => {\n  setValue('');\n};\n\nconst getResult = () => {\n  // eslint-disable-next-line\n  setValue(eval(value));  \n};\n\n\n  return (\n    <div className=\"App\">\n      <p className=\"cal\">Calculator</p>\n      \n      <input id=\"input\" value={value} />\n    \n      <div>\n        <button className=\"ac\" onClick={clickHandler2} value=\"\">\n          AC\n        </button>\n        <button className=\"prcent\"onClick={clickHandler} value=\"%\">\n          %\n        </button>\n        <button  className=\"prcent\"onClick={clickHandler} value=\"/\">\n          /\n        </button>\n\n        <br />\n<div id=\"first\">\n        <button  className=\"btn1\"onClick={clickHandler} value=\"1\">\n          1\n        </button>\n        <button className=\"btn1\"onClick={clickHandler} value=\"2\">\n          2\n        </button>\n        <button className=\"btn1\"onClick={clickHandler} value=\"3\">\n          3\n        </button>\n        <button className=\"prcent\"onClick={clickHandler} value=\"*\">\n          *\n        </button>\n        </div>\n        \n        <div id=\"second\">\n        <button className=\"btn1\"onClick={clickHandler} value=\"4\">\n          4\n        </button>\n        <button  className=\"btn1\"onClick={clickHandler} value=\"5\">\n          5\n        </button>\n        <button className=\"btn1\" onClick={clickHandler} value=\"6\">\n          6\n        </button>\n        <button className=\"prcent\" onClick={clickHandler} value=\"-\">\n          -\n        </button>\n        <br />\n        </div>\n\n        <button className=\"btn1\" onClick={clickHandler} value=\"7\">\n          7\n        </button>\n        <button className=\"btn1\" onClick={clickHandler} value=\"8\">\n          8\n        </button>\n        <button className=\"btn1\"onClick={clickHandler} value=\"9\">\n          9\n        </button>\n        <button  className=\"prcent\"onClick={clickHandler} value=\"+\">\n          +\n        </button>\n        <br />\n        <button className=\"btn1\"onClick={clickHandler} value=\"0\">\n          0\n        </button>\n        <button className=\"btn1\"onClick={clickHandler} value=\".\">\n          .\n        </button>\n        <button className=\"equal\" onClick={getResult}>=</button>\n\n        <br />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}